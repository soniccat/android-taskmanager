apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    defaultConfig {
        applicationId "com.example.rssreader"
        minSdkVersion 21

        targetSdkVersion rootProject.ext.targetSdkVersion
        compileSdkVersion rootProject.ext.compileSdkVersion
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            testCoverageEnabled true
        }
    }

    flavorDimensions "a", "b"

    productFlavors {
        f1a {
            dimension "a"
        }

        f1b {
            dimension "b"
        }

        f2a {
            dimension "a"
        }

        f2b {
            dimension "b"
        }
    }

    android.variantFilter { variant ->
        if (variant.getFlavors().get(0).name.equals('f1a')
                && variant.getFlavors().get(1).name.equals('f2b')) {
            variant.setIgnore(true);
        }
        if (variant.getFlavors().get(0).name.equals('f1b')
                && variant.getFlavors().get(1).name.equals('f2a')) {
            variant.setIgnore(true);
        }
        if (variant.getFlavors().get(0).name.equals('f2a')
                && variant.getFlavors().get(1).name.equals('f1b')) {
            variant.setIgnore(true);
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    androidExtensions {
        experimental = true
    }

//    project.afterEvaluate {
//        project.dependencies.each { handler ->
//            println("aaaa")
//            println(handler)
//        }
//
//        android.applicationVariants.all { variant ->
//            println("bbbb " + variant.getBuildType().getName())
//            println(variant)
//
//            variant.outputs.all { output ->
//                println(output)
//                println(it.fileTree(it.rootDir))
//            }
//        }
//    }
}

dependencies {
    implementation project(':tools')
    implementation project(':taskmanager')
    implementation project(':taskmanager_httptask')
    implementation project(':storagemanager')
    implementation project(':authorization')
    implementation project(':servicetaskmanager')
    implementation project(':authcachemanager')
    implementation project(':service')
    implementation project(':quizlet_repository')
    implementation project(':streamlib')
    implementation project(':quizlet_repository')
    implementation project(':repository')

    implementation 'androidx.legacy:legacy-support-v4:'  + rootProject.ext.legacySupportVersion
    implementation 'androidx.appcompat:appcompat:' + rootProject.ext.appCompatVersion
    implementation 'android.arch.lifecycle:extensions:' + rootProject.ext.archLifecycleVersion
    implementation "androidx.core:core-ktx:1.1.0"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-rc03'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-rc03'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-rc03'
    implementation "androidx.recyclerview:recyclerview:1.1.0"

    implementation 'junit:junit:' + rootProject.ext.junitVersion
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:" + rootProject.ext.coroutinesVersion
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:" + rootProject.ext.coroutinesVersion
    implementation 'io.reactivex.rxjava2:rxandroid:' + rootProject.ext.rxAndroidVersion
    implementation 'io.reactivex.rxjava2:rxjava:' + rootProject.ext.rxJavaVersion

    testImplementation 'org.mockito:mockito-core:1.9.5'

    annotationProcessor 'android.arch.lifecycle:compiler:' + rootProject.archLifecycleVersion
}

task generateClass() {
    println('generateClass: preparing')

    project.afterEvaluate {
        println('generateClass: prepared')

        def srcPath = android.sourceSets['main'].java.srcDirs[0].toString()
        println('source path: ' + srcPath)
        println('project name: ' + project.name)
        println('project path: ' + project.rootDir)

        def resultPath = srcPath + '/' + "custom.java"
        println('result path: ' + resultPath)

        File configFile = file(resultPath)
        //configFile.createNewFile()
        //configFile.write("hello")

        android.applicationVariants.all { variant ->
            //println('variant: ' + variant.name)
            //println('sourceSet: ' + variant.sourceSets[0].)
        }
    }
}
